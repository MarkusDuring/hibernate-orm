/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later
 * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html
 */
package org.hibernate.collection.spi;

import org.hibernate.boot.model.domain.ManagedTypeMapping;
import org.hibernate.mapping.Property;
import org.hibernate.metamodel.model.creation.spi.RuntimeModelCreationContext;
import org.hibernate.metamodel.model.domain.spi.ManagedTypeDescriptor;
import org.hibernate.metamodel.model.domain.spi.PersistentCollectionDescriptor;

/**
 * PersistentCollection wraps Java collection types adding capabilities Hibernate
 * needs to load/persist them - this tuplizer defines extendable support for these
 * PersistentCollection.
 *
 * @author Steve Ebersole
 */
public interface PersistentCollectionRepresentation<T extends PersistentCollection> {

	/**
	 * Get the CollectionClassification handled by this representation
	 */
	CollectionClassification getCollectionClassification();

	/**
	 * Indicates the PersistentCollection implementation generated by this
	 * tuplizer.
	 *
	 * Hibernate uses instances of one of the PersistentCollection sub-types
	 * to "wrap" a collection of values to inject into the domain model.  This
	 * wrapper gives it hooks into the various Collection/Map operations in
	 * order to apply its "aspects" such as lazy-loading, operation-queueing, etc.
	 */
	Class<T> getPersistentCollectionJavaType();

	/**
	 * Create an instance of PersistentCollectionDescriptor
	 */
	<O, C, E> PersistentCollectionDescriptor<O, C, E> generatePersistentCollectionDescriptor(
			ManagedTypeDescriptor runtimeContainer,
			ManagedTypeMapping bootContainer,
			Property bootProperty,
			RuntimeModelCreationContext context);

}
